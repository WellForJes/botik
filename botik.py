import telebot
import time
import pandas as pd
import os
from binance.client import Client
from binance.exceptions import BinanceAPIException
from threading import Thread
from ta.momentum import RSIIndicator
from ta.trend import EMAIndicator
from telebot import types

TOKEN = '7192149351:AAFQOu1ODlMwuzokt31NwR_VoEgwTxvoJEM'
bot = telebot.TeleBot(TOKEN)
client = Client()

user_data = {}
awaiting_deposit_input = {}
watched_signals = set()
monitored_symbols = [
    "DOGEUSDT", "BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT",
    "ADAUSDT", "TRXUSDT", "LINKUSDT", "MATICUSDT", "BNBUSDT",
    "GALAUSDT", "C98USDT", "ARPAUSDT", "1000SATSUSDT", "SANDUSDT",
    "AGLDUSDT", "RAYUSDT", "CTSIUSDT", "ENSUSDT", "FETUSDT"
]
last_signals = []
last_announcement_time = 0
SIGNALS_LOG = 'signals_log.csv'
latest_analysis_info = {"count": 0, "signals": 0, "timestamp": 0}

if not os.path.exists(SIGNALS_LOG):
    df_init = pd.DataFrame(columns=['symbol', 'entry', 'stop', 'take', 'timestamp', 'status', 'direction'])
    df_init.to_csv(SIGNALS_LOG, index=False)

@bot.message_handler(commands=['start'])
def welcome(message):
    user_id = message.chat.id
    if user_id not in user_data:
        user_data[user_id] = {'deposit': 50, 'risk': 1.0}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üíº –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç')
    markup.row('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã', 'üß† –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑')
    markup.row('üìà –ú–æ–Ω–µ—Ç–∞', 'üìò –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    markup.row('üìã –û—Ç—á–µ—Ç')
    bot.send_message(user_id, "üß† –Ø –≤–∞—à —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç, –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìã –û—Ç—á–µ—Ç')
def show_analysis_info(message):
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(latest_analysis_info["timestamp"]))
    bot.send_message(
        message.chat.id,
        f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑:\nüîé –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–æ–Ω–µ—Ç: {latest_analysis_info['count']}\nüìå –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {latest_analysis_info['signals']}\nüïí –í—Ä–µ–º—è: {timestamp}"
    )

@bot.message_handler(func=lambda message: message.text == 'üìò –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def show_stats(message):
    try:
        df = pd.read_csv(SIGNALS_LOG)
        total = len(df)
        wins = len(df[df['status'] == 'win'])
        losses = len(df[df['status'] == 'loss'])
        pending = len(df[df['status'] == 'pending'])
        winrate = round((wins / total) * 100, 1) if total > 0 else 0
        latest = df.tail(3)
        lines = [f"‚Ä¢ {row['symbol']} ‚Üí {row['status']}" for _, row in latest.iterrows()]
        result = (
            f"üìò –í–∞—à–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total}\n"
            f"üü¢ –í –ø–ª—é—Å: {wins}\n"
            f"üî¥ –í –º–∏–Ω—É—Å: {losses}\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {pending}\n"
            f"üìä Winrate: {winrate}%\n\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ:\n" + '\n'.join(lines)
        )
        bot.send_message(message.chat.id, result)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        print("–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", e)

@bot.message_handler(func=lambda message: message.text == 'üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã')
def show_signals(message):
    if not last_signals:
        bot.send_message(message.chat.id, "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.")
    else:
        response = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:\n"
        for s in last_signals[-10:]:
            response += (
                f"\nüìà {s['symbol']} ({'LONG' if s['dir'] == 'long' else 'SHORT'})\n"
                f"‚Ä¢ –í—Ö–æ–¥: {s['entry']}\n"
                f"‚Ä¢ –°—Ç–æ–ø: {s['stop']}\n"
                f"‚Ä¢ –¢–µ–π–∫: {s['take']}\n"
                f"‚Ä¢ RSI: {s['rsi']}\n"
            )
        bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda m: True)
def handle_buttons(message):
    user_id = message.chat.id
    if message.text == 'üíº –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç':
        awaiting_deposit_input[user_id] = True
        bot.send_message(user_id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ USDT:")
    elif awaiting_deposit_input.get(user_id):
        try:
            val = float(message.text.strip())
            if user_id not in user_data:
                user_data[user_id] = {'deposit': val, 'risk': 1.0}
            else:
                user_data[user_id]['deposit'] = val
            awaiting_deposit_input[user_id] = False
            bot.send_message(user_id, f"‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val} USDT")
        except:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50")
    elif message.text == 'üß† –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑':
        bot.send_message(user_id, "üì° –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")
        Thread(target=analyze_market, args=(user_id,)).start()
        Thread(target=update_signal_status).start()
    elif message.text == 'üìà –ú–æ–Ω–µ—Ç–∞':
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons = [types.InlineKeyboardButton(text=s.replace("USDT", ""), callback_data=f"–º–æ–Ω–µ—Ç–∞_{s}") for s in monitored_symbols]
        markup.add(*buttons)
        bot.send_message(user_id, "üí† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("–º–æ–Ω–µ—Ç–∞_"))
def handle_coin_selection(call):
    symbol = call.data.replace("–º–æ–Ω–µ—Ç–∞_", "")
    try:
        klines = client.get_klines(symbol=symbol, interval="1h", limit=100)
        df = pd.DataFrame(klines, columns=["timestamp", "open", "high", "low", "close", "volume",
                                           "close_time", "quote_asset_volume", "trades", "taker_base", "taker_quote", "ignore"])
        df["close"] = pd.to_numeric(df["close"])
        rsi = RSIIndicator(df["close"], window=14).rsi().iloc[-1]
        price = float(df["close"].iloc[-1])
        signal = next((s for s in last_signals if s['symbol'] == symbol), None)
        text = f"üìà {symbol}\nüíµ –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {round(price, 4)} USDT\nüìä RSI (1H): {round(rsi, 2)}\n"
        if signal:
            text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª ({'LONG' if signal['dir']=='long' else 'SHORT'}):\n‚Ä¢ –í—Ö–æ–¥: {signal['entry']}\n‚Ä¢ –°—Ç–æ–ø: {signal['stop']}\n‚Ä¢ –¢–µ–π–∫: {signal['take']}"
        else:
            text += "üîç –ü–æ–∫–∞ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –≤—Ö–æ–¥–∞."
        bot.send_message(call.message.chat.id, text)
    except Exception as e:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–µ—Ç–µ.")
        print("–û—à–∏–±–∫–∞ –≤ handle_coin_selection:", e)

def analyze_market(user_id):
    global last_announcement_time, latest_analysis_info
    while True:
        analyzed = 0
        signals_found = 0
        for symbol in monitored_symbols:
            try:
                analyzed += 1
                h1_klines = client.get_klines(symbol=symbol, interval="1h", limit=100)
                h1_df = pd.DataFrame(h1_klines, columns=["timestamp", "open", "high", "low", "close", "volume",
                                                          "close_time", "quote_asset_volume", "trades", "taker_base", "taker_quote", "ignore"])
                h1_df["close"] = pd.to_numeric(h1_df["close"])
                rsi_h1 = RSIIndicator(h1_df["close"], window=14).rsi().iloc[-1]
                ema = EMAIndicator(h1_df["close"], window=200).ema_indicator().iloc[-1]
                price_now = h1_df["close"].iloc[-1]
                direction = None
                if rsi_h1 < 30 and price_now > ema:
                    direction = 'long'
                elif rsi_h1 > 70 and price_now < ema:
                    direction = 'short'
                if direction:
                    m5_klines = client.get_klines(symbol=symbol, interval="5m", limit=10)
                    df = pd.DataFrame(m5_klines, columns=["timestamp", "open", "high", "low", "close", "volume",
                                                          "close_time", "quote_asset_volume", "trades", "taker_base", "taker_quote", "ignore"])
                    df["close"] = pd.to_numeric(df["close"])
                    df["open"] = pd.to_numeric(df["open"])
                    df["low"] = pd.to_numeric(df["low"])
                    df["high"] = pd.to_numeric(df["high"])
                    if check_reversal_pattern(df, direction) and f"{symbol}_{direction}" not in watched_signals:
                        signals_found += 1
                        # –ú–µ—Å—Ç–æ –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
            time.sleep(0.2)
        latest_analysis_info = {
            "count": analyzed,
            "signals": signals_found,
            "timestamp": int(time.time())
        }
        time.sleep(60)

def check_reversal_pattern(df, direction):
    last = df.iloc[-1]
    prev = df.iloc[-2]
    open_ = float(last['open'])
    close = float(last['close'])
    low = float(last['low'])
    high = float(last['high'])
    body = abs(close - open_)
    shadow = (open_ - low) if close > open_ else (high - close)
    if direction == 'long':
        is_hammer = shadow > body * 1.5 and close > open_
        is_engulfing = close > open_ and open_ < prev['close'] and close > prev['open']
        return is_hammer or is_engulfing
    else:
        is_inverted_hammer = shadow > body * 1.5 and close < open_
        is_bearish_engulfing = close < open_ and open_ > prev['close'] and close < prev['open']
        return is_inverted_hammer or is_bearish_engulfing

def update_signal_status():
    while True:
        try:
            df = pd.read_csv(SIGNALS_LOG)
            updated = False
            for idx, row in df[df['status'] == 'pending'].iterrows():
                symbol = row['symbol']
                stop = float(row['stop'])
                take = float(row['take'])
                candles = client.get_klines(symbol=symbol, interval="5m", limit=10)
                closes = [float(c[4]) for c in candles]
                high = max(closes)
                low = min(closes)
                if row['direction'] == 'long':
                    if high >= take:
                        df.at[idx, 'status'] = 'win'
                        updated = True
                    elif low <= stop:
                        df.at[idx, 'status'] = 'loss'
                        updated = True
                else:
                    if low <= take:
                        df.at[idx, 'status'] = 'win'
                        updated = True
                    elif high >= stop:
                        df.at[idx, 'status'] = 'loss'
                        updated = True
            if updated:
                df.to_csv(SIGNALS_LOG, index=False)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:", e)
        time.sleep(300)

bot.polling(none_stop=True)
